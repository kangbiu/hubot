TIMEZONE = "Asia/Hong_Kong"
QUITTING_TIME = '0 0/30 15-23 * * 2-7' # M-S 3pm to 11 pm 0 - 30 mins
RESET_TIME = '0 58 14 * * 2-7' # M-S 2:58 mins 
ROOM = "53157_developers@conf.hipchat.com"

PRODUCTION_DEPLOYMENT_TEXT  = /(Ship it\!)/
SORRY_TEXT          = /(.*)sorry(.*)/i
NO_SORRY_TEXT       = "No Sorry! Already Committed!"
RESET_TEXT          = /((.*)shut(.*)up(.*))/
RESET_REPLY_TEXT    = "Ok.. Ok... Will Shut up! :( "
RESTART_TEXT        = /((.*)monitor(.*)commit(.*))/
RESTART_REPLY_TEXT  = "Yes, Sir!! :) "

sorry_replies = [
  "Love means not ever having to say you're sorry. Strikingly Loves You, so please get it done!"
  "Would 'sorry' have made any difference? No right? So please get it done!"
  "Don't say sorry to me. say sorry to Joe (who is the CXXXO)and he might consider to forgive you. Or please get it done!"
  "S.O.R.R.Y?! Sorry what?! no sorry! go and get the shxt done!"
]

cronJob 	= require('cron').CronJob
cronJob2    = require('cron').CronJob
Select      = require( "soupselect" ).select
HTMLParser  = require "htmlparser"

ALREADY_COMMIT = "ALREADY_COMMIT"

if process.env.REDISTOGO_URL
  console.log "REDISTOGO_URL exists as ENV variable"
  rtg   = require("url").parse(process.env.REDISTOGO_URL)
  redis = require("redis").createClient(rtg.port, rtg.hostname)
  redis.auth(rtg.auth.split(":")[1])
else
  console.log "REDISTOGO_URL NOT exists as ENV variable"
  redis = require("redis").createClient()

module.exports = (robot) ->
  initAlreadyCommitValue()

  robot.hear PRODUCTION_DEPLOYMENT_TEXT, (msg) ->
    redis.set ALREADY_COMMIT, true
    msg.send "Good Job! Time for a 9gag fun"
    send_meme msg, false, (text)->
      msg.send text

  robot.respond SORRY_TEXT, (msg) ->
    try
        alreadyCommit = null
        redis.get ALREADY_COMMIT, (err, replies) -> 
          alreadyCommit = replies
          if alreadyCommit == 'false'
            msg.send msg.random sorry_replies
          if alreadyCommit == 'true'
            msg.send NO_SORRY_TEXT 
    catch e
      console.log e.message 


  robot.respond RESET_TEXT, (msg) ->
    redis.set ALREADY_COMMIT, true
    msg.send  RESET_REPLY_TEXT

  robot.respond RESTART_TEXT, (msg) ->
    redis.set ALREADY_COMMIT, false
    msg.send  RESTART_REPLY_TEXT

  sendCommitReminderToChatRoom = new cronJob QUITTING_TIME,
    ->
      try
        alreadyCommitFromRedis = null
        redis.get ALREADY_COMMIT, (err, replies) -> 
          alreadyCommitFromRedis = replies
          if alreadyCommitFromRedis == 'false'
            robot.messageRoom ROOM, "Hey! Time to Commit Code!"
          if alreadyCommitFromRedis == 'true'
            console.log "ALREADY_COMMIT value is #{alreadyCommitFromRedis}, NO Message Sent"  
      catch e
        console.log e.message     
    null,
    true,
    TIMEZONE

  updateTheFlag = new cronJob2 RESET_TIME,
    ->
      console.log "Set ALREADY_COMMIT flag"
      redis.set ALREADY_COMMIT, false
      console.log "ALREADY_COMMIT value is set to #{ALREADY_COMMIT}"
    null,
    true,
    TIMEZONE

initAlreadyCommitValue = ->
    try
      console.log "Start Init Check"
      redis.get ALREADY_COMMIT, (err, replies) ->
        if replies is null
          console.log "ALREADY_COMMIT is NOT set. Will set it to false"
          redis.set ALREADY_COMMIT, false
    catch e
      console.log e.message
    
send_meme = (message, location, response_handler)->
  meme_domain = "http://9gag.com"
  location  ||= "/random"
  if location.substr(0, 4) != "http"
    url = meme_domain + location
  else
    url = location

  message.http( url ).get() (error, response, body)->
    return response_handler "Sorry, something went wrong" if error

    if response.statusCode == 302
      location = response.headers['location']
      return send_meme( message, location, response_handler )

    img_src = get_meme_image( body, ".badge-item-img" )

    if img_src.substr(0, 4) != "http"
      img_src = "http:#{img_src}"

    response_handler img_src

get_meme_image = (body, selector)->
  html_handler  = new HTMLParser.DefaultHandler((()->), ignoreWhitespace: true )
  html_parser   = new HTMLParser.Parser html_handler

  html_parser.parseComplete body
  Select( html_handler.dom, selector )[0].attribs.src
  